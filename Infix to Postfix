#infix to postfix
#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define max 10

// Stack for characters
char stack[max];
int top = -1;

void push(char x) {
    if (top < max - 1) {
        stack[++top] = x;
    }
}

char pop() {
    if (top >= 0) {
        return stack[top--]; // Return top element, then decrement top
    }
    return -1;//if any error
}

char peek() {
    if (top >= 0) {
        return stack[top];
    }
    return -1;//if any error , not necessary
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    if (op == '^') return 3;
    return 0;
}

void infix_to_postfix(char* infix) {
    char postfix[max];
    int i = 0, j = 0;

    while (infix[i] != '\0') {
        //case1: If the character is an operand, add it to the postfix expression
        if (isalpha(infix[i])) {
            postfix[j++] = infix[i];
        }
        //case2: If the character is '(', push it to the stack
        else if (infix[i] == '(') {
            push(infix[i]);
        }
        //case3: If the character is ')', pop until '(' is found
        else if (infix[i] == ')') {
            while (top != -1 && peek() != '(') {
                postfix[j++] = pop();
            }
            pop(); // Remove '(' from the stack
        }
        //case4: If the character is an operator
        else {
            while (top != -1 && precedence(peek()) >= precedence(infix[i])) {
                postfix[j++] = pop();
            }
            push(infix[i]);
        }
        i++;
    }

    // Pop all remaining operators from the stack
    while (top != -1) {
        postfix[j++] = pop();
    }
    postfix[j] = '\0'; // Null-terminate the postfix expression

    printf("Postfix expression: %s\n", postfix);
}

int main() {
    char infix[max];
    printf("Enter Infix expression: ");
    scanf("%s",&infix); 

    infix_to_postfix(infix);
    return 0;
}
