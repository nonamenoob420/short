#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *left, *right;
};

struct Node* createNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = node->right = NULL;
    return node;
}

void inorder(struct Node* root) {
    if (root == NULL)
        return;
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}

void preorder(struct Node* root) {
    if (root == NULL)
        return;
    printf("%d ", root->data);
    preorder(root->left);
    preorder(root->right);
}

void postorder(struct Node* root) {
    if (root == NULL)
        return;
    postorder(root->left);
    postorder(root->right);
    printf("%d ", root->data);
}

int isFull(struct Node* root) {
    if (root == NULL)
        return 1;
    if (root->left == NULL && root->right == NULL)
        return 1;
    if (root->left && root->right)
        return (isFull(root->left) && isFull(root->right));
    return 0;
}

// Function to delete the entire tree
void deleteTree(struct Node* root) {
    if (root == NULL)
        return;
    deleteTree(root->left);
    deleteTree(root->right);
    free(root);
}

// Function to delete a specific node with given key
struct Node* deleteNode(struct Node* root, int key) {
    if (root == NULL)
        return NULL;

    if (root->data == key) {
        free(root);
        return NULL;
    }

    // Recursively find the node to delete in the left and right subtrees
    root->left = deleteNode(root->left, key);
    root->right = deleteNode(root->right, key);

    return root;
}

int main() {
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);

    printf("Inorder Traversal: ");
    inorder(root);
    printf("\nPreorder Traversal: ");
    preorder(root);
    printf("\nPostorder Traversal: ");
    postorder(root);

    int result = isFull(root);
    printf("\nFull=%d\n", result);


    int key = 3;
    printf("\nDeleting node with key %d...\n", key);
    root = deleteNode(root, key);

    printf("Inorder Traversal after deletion: ");
    inorder(root);
    printf("\n");


    deleteTree(root);
    root = NULL;

    return 0;
}
