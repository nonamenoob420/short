#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

// Stack structure and functions
char stack[MAX];
int top = -1;

void push(char x) {
    if (top < MAX - 1)
        stack[++top] = x;
}

char pop() {
    if (top >= 0)
        return stack[top--];
    return -1;
}

char peek() {
    if (top >= 0)
        return stack[top];
    return -1;
}

// Function to check precedence of operators
int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    if (op == '^') return 3;
    return 0;
}

// Function to convert infix to prefix
void infix_To_Prefix(char* infix) {
    char prefix[MAX];
    int length = strlen(infix);
    int j = 0;

    // Step 1: Process the infix expression from right to left
    for (int i = length - 1; i >= 0; i--) {
        // Case 1: If the character is an operand, add it to the prefix output
        if (isalnum(infix[i])) {
            prefix[j++] = infix[i];
        }
        // Case 2: If the character is ')', push it to the stack
        else if (infix[i] == ')') {
            push(infix[i]);
        }
        // Case 3: If the character is '(', pop and add to the output until ')' is found
        else if (infix[i] == '(') {
            while (top != -1 && peek() != ')')
                prefix[j++] = pop();
            pop(); // Remove the ')' from the stack
        }
        // Case 4: If the character is an operator
        else {
            // Pop from stack to output if the precedence of top is greater than current
            while (top != -1 && precedence(peek()) > precedence(infix[i]))
                prefix[j++] = pop();
            push(infix[i]); // Push current operator to stack
        }
    }

    // Pop all remaining operators in the stack
    while (top != -1) {
        prefix[j++] = pop();
    }

    prefix[j] = '\0'; // Null-terminate the prefix expression

    // Step 2: Reverse the resulting prefix expression before printing
    for (int i = 0; i < j / 2; i++) {
        char temp = prefix[i];
        prefix[i] = prefix[j - i - 1];
        prefix[j - i - 1] = temp;
    }

    printf("Prefix expression: %s\n", prefix);
}

int main() {
    char infix[MAX];

    printf("Enter infix expression: ");
    scanf("%s", infix);

    infix_To_Prefix(infix);

    return 0;
}
