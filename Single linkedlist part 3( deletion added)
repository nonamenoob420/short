#include<stdio.h>
#include<stdlib.h>
#define max 5
struct node{
    int data;
    struct node *next;
};
void count(struct node *head){
    struct node* ptr=NULL;
    ptr=head;
    int count=0;
    if (head==NULL){
        printf("underflow");
        return;
    }
    else{
        while (ptr!=NULL){
            count++;
            ptr=ptr->next;
        }
    }
     printf("the count is=%d\n",count);
}
void print(struct node* head){
    struct node* ptr=NULL;
    ptr=head;
    if (head==NULL){
        printf("Underflow");
        return;
    }
    else{
        while (ptr!=NULL){
        printf("%d->",ptr->data);
        ptr=ptr->next;
    }
    printf("NULL\n");
}
}
struct node* insert_begin(struct node* head,int item){
    struct node* temp=NULL;
    temp=(struct node*)malloc(sizeof(struct node));
    if (temp==NULL){
        printf("memory allocation failed");
    }
    else{
        temp->data=item;
        temp->next=head;
        head=temp;
    }
    return head;
}
void insert_end(struct node* head, int item){
    struct node* temp=NULL;
    struct node* ptr=NULL;
    ptr=head;
    temp=(struct node*)malloc(sizeof(struct node));
    temp->data=item;
    temp->next=NULL;
    while(ptr->next!=NULL){
        ptr=ptr->next;
    }
    ptr->next=temp;
}
void insert_random(struct node* head,int item,int pos){
    struct node* ptr=head;
    struct node* temp=NULL;
    temp=(struct node*)malloc(sizeof(struct node));
    if (pos==0){
        insert_begin(head,item);
        return;
    }
    else{
        for(int i=0;i<pos-1 && ptr!=NULL;i++){
            ptr=ptr->next;
        }
    }
    if(ptr==NULL){
        printf("position out of bounds");
        free(temp);
    }
    temp->next=ptr->next;
    ptr->next=temp;
    temp->data=item;
}
void delete_begin(struct node** head){
    struct node* ptr=NULL;
    if (head==NULL){
        printf("list is empty");
    }
    else{
        ptr=*head;
        *head=ptr->next;
        free(ptr);
    }
}
void delete_end(struct node* head){
    struct node* ptr,*ptr1;
    if (head==NULL){
        printf("list is empty");
    }
    else if(head->next==NULL){
        head=NULL;
        free(head);
    }
    else{
        ptr=head;
        while(ptr->next!=NULL){
            ptr1=ptr;
            ptr=ptr->next;
        }
        ptr1->next=NULL;
        free(ptr);
    }
}
void delete_random(struct node* head,int pos){
    struct node  *ptr,*ptr1;
    ptr=head;
    for (int i=0;i<pos;i++){
        ptr1=ptr;
        ptr=ptr->next;
    }
    if (ptr==NULL){
        printf("list is already empty");
    }
    ptr1->next=ptr->next;
    free(ptr);
}
int main(){
    struct node* head=NULL;
    head=(struct node*)malloc(sizeof(struct node));
    struct node* current1=NULL;
    current1=(struct node*)malloc(sizeof(struct node));
    struct node* current2=NULL;
    current2=(struct node*)malloc(sizeof(struct node));
    head->data=1;
    head->next=current1;
    current1->data=2;
    current1->next=current2;
    current2->data=3;
    current2->next=NULL;
    
    int item=5;
    int item2=10;
    int pos=2;
    int item3=9;
    count(head);
    print(head);
    head=insert_begin(head,item);
    insert_end(head,item2);
    print(head);
    insert_random(head,item3,pos);
    print(head);
    delete_begin(&head);
    print(head);
    delete_end(head);
    print(head);
    int loc=2;
    delete_random(head,loc);
    print(head);
    return 0;
}
